// Generated by Dagger (https://dagger.dev).
package com.example.tasktrackercompose.di;

import com.example.tasktrackercompose.feature_task_list.domain.repository.TaskRepository;
import com.example.tasktrackercompose.feature_task_list.domain.use_case.TaskUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideTaskUseCasesFactory implements Factory<TaskUseCases> {
  private final Provider<TaskRepository> repositoryProvider;

  public AppModule_ProvideTaskUseCasesFactory(Provider<TaskRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public TaskUseCases get() {
    return provideTaskUseCases(repositoryProvider.get());
  }

  public static AppModule_ProvideTaskUseCasesFactory create(
      Provider<TaskRepository> repositoryProvider) {
    return new AppModule_ProvideTaskUseCasesFactory(repositoryProvider);
  }

  public static TaskUseCases provideTaskUseCases(TaskRepository repository) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideTaskUseCases(repository));
  }
}
