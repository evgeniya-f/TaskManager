// Generated by Dagger (https://dagger.dev).
package com.example.tasktrackercompose.di;

import com.example.tasktrackercompose.feature_task_list.data.data_source.TaskDatabase;
import com.example.tasktrackercompose.feature_task_list.domain.repository.TaskRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideNoteRepositoryFactory implements Factory<TaskRepository> {
  private final Provider<TaskDatabase> dbProvider;

  public AppModule_ProvideNoteRepositoryFactory(Provider<TaskDatabase> dbProvider) {
    this.dbProvider = dbProvider;
  }

  @Override
  public TaskRepository get() {
    return provideNoteRepository(dbProvider.get());
  }

  public static AppModule_ProvideNoteRepositoryFactory create(Provider<TaskDatabase> dbProvider) {
    return new AppModule_ProvideNoteRepositoryFactory(dbProvider);
  }

  public static TaskRepository provideNoteRepository(TaskDatabase db) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideNoteRepository(db));
  }
}
