// Generated by Dagger (https://dagger.dev).
package com.example.tasktrackercompose.feature_task_list.presentation.task_list;

import com.example.tasktrackercompose.feature_task_list.domain.use_case.TaskUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TasksViewModel_Factory implements Factory<TasksViewModel> {
  private final Provider<TaskUseCases> taskUseCasesProvider;

  public TasksViewModel_Factory(Provider<TaskUseCases> taskUseCasesProvider) {
    this.taskUseCasesProvider = taskUseCasesProvider;
  }

  @Override
  public TasksViewModel get() {
    return newInstance(taskUseCasesProvider.get());
  }

  public static TasksViewModel_Factory create(Provider<TaskUseCases> taskUseCasesProvider) {
    return new TasksViewModel_Factory(taskUseCasesProvider);
  }

  public static TasksViewModel newInstance(TaskUseCases taskUseCases) {
    return new TasksViewModel(taskUseCases);
  }
}
